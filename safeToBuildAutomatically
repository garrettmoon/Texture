# Why is this a dangerfile instead of just using octokit directly?
# danger has methods for accessing the local git checkout and also
# caches github requests to a local cache directory to avoid 
# excessive calls to the github API and rate limiting.

require "net/http"
require "json"

exclude_path = 'CI/exclude-from-build.json'

CI_files = [/^.buildkite/i, /^Dangerfile/i, /^#{exclude_path}$/i]

pipeline = "steps:\n"

# if this is a PR, check to see if we should automatically build or wait for employee
# approval
if ENV["BUILDKITE_PULL_REQUEST"] != nil
  is_member_of_pinterest = github.api.organization_member?("Pinterest", github.pr_author)
  modifies_CI = false
  in_whitelist = false

  CI_files.each do |file_pattern|
    if !git.modified_files.grep(file_pattern).empty?
      modifies_CI = true
      warn "PR modifies CI file"
    end
  end

  if !is_member_of_pinterest
    whitelist = JSON.parse(github.api.get "https://raw.githubusercontent.com/pinterest/ios-oss-ci/master/whitelist.json")["whitelist"]
    in_whitelist = whitelist.include?(github.pr_author)
  end

  print "is_member_of_pinterest: #{is_member_of_pinterest}\n"
  print "modifies_CI: #{modifies_CI}\n"
  print "in_whitelist: #{in_whitelist}\n"
  # block the PR if they modify CI and aren't pinterest or if they're not in the whitelist
  if !is_member_of_pinterest && (modifies_CI || !in_whitelist)
    if modifies_CI
      fail "PR modifies CI which is not allowed"
    end
    pipeline += "  - block"
  end
end

# add danger build step
pipeline += "  - label: ':customs: Danger'\n    command: bundle exec danger\n"

needs_build = true
# check if we need a build step at all
if File.exist?(exclude_path)
  all_files_exclude = true
  exclude_patterns = File.read(exclude_path)
  exclude_patterns = JSON.parse(exclude_patterns)
  (git.modified_files + git.added_files + git.deleted_files).each do |file|
    exclude_patterns.each do |pattern|
      if pattern.match(file) == nil
        all_files_exclude = false
      end
    end
  end
  
  if all_files_exclude
    needs_build = false
  end
end

if needs_build
  pipeline += "  - label: ':testflight: Tests'\n"
  pipeline += "    command: CI/run_tests_update_status.sh '#{ENV["UPDATE_STATUS_PATH"]}' '#{ENV["${BUILDKITE_PULL_REQUEST}"]}' '#{ENV["BUILDKITE_BUILD_URL"]}'\n"
  pipeline += "    env:\n"
  pipeline += "      DANGER_GITHUB_API_TOKEN: #{ENV["WRITEABLE_DANGER_GITHUB_API_TOKEN"]}\n"
end

%x(echo "#{pipeline}" > pipeline)
%x(echo "#{pipeline}" | buildkite-agent pipeline upload)